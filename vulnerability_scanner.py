"""
Vulnerability Scanner - Scans external dependencies for security advisories.
"""

from typing import List, Tuple, Dict, Any
from get_external_dependencies import get_external_dependencies
from query_security_advisories import query_security_advisories, detect_ecosystem
import json


def get_vulnerable_packages() -> List[Tuple[str, str, List[Dict[str, Any]]]]:
    """
    Fetch initial set of vulnerable packages by checking all external dependencies
    for security advisories.
    
    Returns:
        List of tuples containing (package_name, version, advisory_list)
        Only includes packages that have at least one security advisory.
    """
    print("Fetching external dependencies from Neo4j...")
    dependencies = get_external_dependencies()
    
    vulnerable_packages = []
    
    print(f"Checking {len(dependencies)} dependencies for vulnerabilities...")
    for package_name, version in dependencies:
        # Skip packages without version info
        if version == "Unknown":
            continue
            
        # Detect ecosystem and query advisories
        ecosystem = detect_ecosystem(package_name)
        advisories = query_security_advisories(package_name, version, ecosystem)
        
        # Only include packages with vulnerabilities
        if advisories:
            vulnerable_packages.append((package_name, version, advisories))
            print(f"  [WARNING] {package_name} {version}: {len(advisories)} vulnerabilities found")
    
    print(f"\nFound {len(vulnerable_packages)} vulnerable packages out of {len(dependencies)} total dependencies")
    return vulnerable_packages


def save_vulnerable_packages_report(output_file: str = "vulnerable_packages.json"):
    """
    Generate and save a report of all vulnerable packages.
    
    Args:
        output_file: Path to save the JSON report
    """
    vulnerable_packages = get_vulnerable_packages()
    
    # Format the data for the report
    report = {
        "summary": {
            "total_vulnerable_packages": len(vulnerable_packages),
            "high_severity_count": 0,
            "medium_severity_count": 0,
            "low_severity_count": 0,
            "critical_severity_count": 0
        },
        "vulnerable_packages": []
    }
    
    for package_name, version, advisories in vulnerable_packages:
        package_info = {
            "package": package_name,
            "version": version,
            "advisory_count": len(advisories),
            "advisories": []
        }
        
        for advisory in advisories:
            severity = advisory.get("severity", "UNKNOWN")
            
            # Count severities
            if severity == "CRITICAL":
                report["summary"]["critical_severity_count"] += 1
            elif severity == "HIGH":
                report["summary"]["high_severity_count"] += 1
            elif severity == "MODERATE":
                report["summary"]["medium_severity_count"] += 1
            elif severity == "LOW":
                report["summary"]["low_severity_count"] += 1
            
            package_info["advisories"].append({
                "ghsa_id": advisory.get("ghsa_id"),
                "severity": severity,
                "cvss_score": advisory.get("cvss_score", 0),
                "summary": advisory.get("summary"),
                "vulnerable_range": advisory.get("vulnerable_range"),
                "fixed_version": advisory.get("first_patched_version", "No fix available")
            })
        
        # Sort advisories by CVSS score (highest first)
        package_info["advisories"].sort(key=lambda x: x["cvss_score"], reverse=True)
        report["vulnerable_packages"].append(package_info)
    
    # Sort packages by number of advisories
    report["vulnerable_packages"].sort(key=lambda x: x["advisory_count"], reverse=True)
    
    # Save the report
    with open(output_file, 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"\nVulnerability report saved to: {output_file}")
    print(f"Summary:")
    print(f"  - Total vulnerable packages: {report['summary']['total_vulnerable_packages']}")
    print(f"  - Critical severity: {report['summary']['critical_severity_count']}")
    print(f"  - High severity: {report['summary']['high_severity_count']}")
    print(f"  - Medium severity: {report['summary']['medium_severity_count']}")
    print(f"  - Low severity: {report['summary']['low_severity_count']}")


if __name__ == "__main__":
    # Test the vulnerability scanner
    vulnerable = get_vulnerable_packages()
    
    print("\nTop 5 most vulnerable packages:")
    for i, (package, version, advisories) in enumerate(vulnerable[:5]):
        print(f"{i+1}. {package} {version}: {len(advisories)} advisories")
        # Show highest severity advisory
        if advisories:
            highest = max(advisories, key=lambda x: x.get("cvss_score", 0))
            print(f"   Highest CVSS: {highest.get('cvss_score', 0)} - {highest.get('summary', '')[:60]}...")
    
    # Save detailed report
    save_vulnerable_packages_report()